// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: notification.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotificacionService_CrearNotificacion_FullMethodName        = "/proto.NotificacionService/CrearNotificacion"
	NotificacionService_ObtenerNotificacion_FullMethodName      = "/proto.NotificacionService/ObtenerNotificacion"
	NotificacionService_ListarNotificaciones_FullMethodName     = "/proto.NotificacionService/ListarNotificaciones"
	NotificacionService_EliminarNotificacion_FullMethodName     = "/proto.NotificacionService/EliminarNotificacion"
	NotificacionService_NotificacionesPorUsuario_FullMethodName = "/proto.NotificacionService/NotificacionesPorUsuario"
)

// NotificacionServiceClient is the client API for NotificacionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificacionServiceClient interface {
	CrearNotificacion(ctx context.Context, in *CrearNotificacionRequest, opts ...grpc.CallOption) (*NotificacionResponse, error)
	ObtenerNotificacion(ctx context.Context, in *NotificacionRequest, opts ...grpc.CallOption) (*NotificacionResponse, error)
	ListarNotificaciones(ctx context.Context, in *ListarNotificacionesRequest, opts ...grpc.CallOption) (*ListarNotificacionesResponse, error)
	EliminarNotificacion(ctx context.Context, in *EliminarNotificacionRequest, opts ...grpc.CallOption) (*RespuestaEliminacion, error)
	NotificacionesPorUsuario(ctx context.Context, in *NotificacionesPorUsuarioRequest, opts ...grpc.CallOption) (*NotificacionesPorUsuarioResponse, error)
}

type notificacionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificacionServiceClient(cc grpc.ClientConnInterface) NotificacionServiceClient {
	return &notificacionServiceClient{cc}
}

func (c *notificacionServiceClient) CrearNotificacion(ctx context.Context, in *CrearNotificacionRequest, opts ...grpc.CallOption) (*NotificacionResponse, error) {
	out := new(NotificacionResponse)
	err := c.cc.Invoke(ctx, NotificacionService_CrearNotificacion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificacionServiceClient) ObtenerNotificacion(ctx context.Context, in *NotificacionRequest, opts ...grpc.CallOption) (*NotificacionResponse, error) {
	out := new(NotificacionResponse)
	err := c.cc.Invoke(ctx, NotificacionService_ObtenerNotificacion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificacionServiceClient) ListarNotificaciones(ctx context.Context, in *ListarNotificacionesRequest, opts ...grpc.CallOption) (*ListarNotificacionesResponse, error) {
	out := new(ListarNotificacionesResponse)
	err := c.cc.Invoke(ctx, NotificacionService_ListarNotificaciones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificacionServiceClient) EliminarNotificacion(ctx context.Context, in *EliminarNotificacionRequest, opts ...grpc.CallOption) (*RespuestaEliminacion, error) {
	out := new(RespuestaEliminacion)
	err := c.cc.Invoke(ctx, NotificacionService_EliminarNotificacion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificacionServiceClient) NotificacionesPorUsuario(ctx context.Context, in *NotificacionesPorUsuarioRequest, opts ...grpc.CallOption) (*NotificacionesPorUsuarioResponse, error) {
	out := new(NotificacionesPorUsuarioResponse)
	err := c.cc.Invoke(ctx, NotificacionService_NotificacionesPorUsuario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificacionServiceServer is the server API for NotificacionService service.
// All implementations must embed UnimplementedNotificacionServiceServer
// for forward compatibility
type NotificacionServiceServer interface {
	CrearNotificacion(context.Context, *CrearNotificacionRequest) (*NotificacionResponse, error)
	ObtenerNotificacion(context.Context, *NotificacionRequest) (*NotificacionResponse, error)
	ListarNotificaciones(context.Context, *ListarNotificacionesRequest) (*ListarNotificacionesResponse, error)
	EliminarNotificacion(context.Context, *EliminarNotificacionRequest) (*RespuestaEliminacion, error)
	NotificacionesPorUsuario(context.Context, *NotificacionesPorUsuarioRequest) (*NotificacionesPorUsuarioResponse, error)
	mustEmbedUnimplementedNotificacionServiceServer()
}

// UnimplementedNotificacionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificacionServiceServer struct {
}

func (UnimplementedNotificacionServiceServer) CrearNotificacion(context.Context, *CrearNotificacionRequest) (*NotificacionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrearNotificacion not implemented")
}
func (UnimplementedNotificacionServiceServer) ObtenerNotificacion(context.Context, *NotificacionRequest) (*NotificacionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerNotificacion not implemented")
}
func (UnimplementedNotificacionServiceServer) ListarNotificaciones(context.Context, *ListarNotificacionesRequest) (*ListarNotificacionesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListarNotificaciones not implemented")
}
func (UnimplementedNotificacionServiceServer) EliminarNotificacion(context.Context, *EliminarNotificacionRequest) (*RespuestaEliminacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EliminarNotificacion not implemented")
}
func (UnimplementedNotificacionServiceServer) NotificacionesPorUsuario(context.Context, *NotificacionesPorUsuarioRequest) (*NotificacionesPorUsuarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotificacionesPorUsuario not implemented")
}
func (UnimplementedNotificacionServiceServer) mustEmbedUnimplementedNotificacionServiceServer() {}

// UnsafeNotificacionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificacionServiceServer will
// result in compilation errors.
type UnsafeNotificacionServiceServer interface {
	mustEmbedUnimplementedNotificacionServiceServer()
}

func RegisterNotificacionServiceServer(s grpc.ServiceRegistrar, srv NotificacionServiceServer) {
	s.RegisterService(&NotificacionService_ServiceDesc, srv)
}

func _NotificacionService_CrearNotificacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrearNotificacionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificacionServiceServer).CrearNotificacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificacionService_CrearNotificacion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificacionServiceServer).CrearNotificacion(ctx, req.(*CrearNotificacionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificacionService_ObtenerNotificacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificacionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificacionServiceServer).ObtenerNotificacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificacionService_ObtenerNotificacion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificacionServiceServer).ObtenerNotificacion(ctx, req.(*NotificacionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificacionService_ListarNotificaciones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListarNotificacionesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificacionServiceServer).ListarNotificaciones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificacionService_ListarNotificaciones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificacionServiceServer).ListarNotificaciones(ctx, req.(*ListarNotificacionesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificacionService_EliminarNotificacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EliminarNotificacionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificacionServiceServer).EliminarNotificacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificacionService_EliminarNotificacion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificacionServiceServer).EliminarNotificacion(ctx, req.(*EliminarNotificacionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificacionService_NotificacionesPorUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificacionesPorUsuarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificacionServiceServer).NotificacionesPorUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificacionService_NotificacionesPorUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificacionServiceServer).NotificacionesPorUsuario(ctx, req.(*NotificacionesPorUsuarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificacionService_ServiceDesc is the grpc.ServiceDesc for NotificacionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificacionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NotificacionService",
	HandlerType: (*NotificacionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrearNotificacion",
			Handler:    _NotificacionService_CrearNotificacion_Handler,
		},
		{
			MethodName: "ObtenerNotificacion",
			Handler:    _NotificacionService_ObtenerNotificacion_Handler,
		},
		{
			MethodName: "ListarNotificaciones",
			Handler:    _NotificacionService_ListarNotificaciones_Handler,
		},
		{
			MethodName: "EliminarNotificacion",
			Handler:    _NotificacionService_EliminarNotificacion_Handler,
		},
		{
			MethodName: "NotificacionesPorUsuario",
			Handler:    _NotificacionService_NotificacionesPorUsuario_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
